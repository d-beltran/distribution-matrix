RAM

cuidao que las escaleras se pueden poner formando discarded grid, hay que ver como se asigna su posición

[si no se dá la situación difícil] recuperar min size para el parent free space porque sino al final pueden quedar huecos que no respeten
	*** esto lo quité por un problema técnico, por lo visto
	*** pero es importante, puede quedar fatal justo antes del set_corridor
	y si prohibimos el espacio libre sobrante?
		-> si quieres un recibidor hacemos que haya un forma explícita de declarar un child que se fusione con el corridor
	*** NO, mejor, la forma de garantizar el free space es crear nosotros una dummy child room con el min size del padre que invada todo lo que sobra
		de hecho podemos comprovar si la free space cumple el min size antes de hacer esto
		si una solo no lo cumple, convertimos cada free space que si lo cumpla en una habitación dummy independiente as is
		y para los espacios que no lo cumplan empezamos a expandir poco a poco

¿priorizamos expandir fronteras largas antes que cortas?
	sino había que provar, es fácil de hacer

setup_stairs -> que chequee para cada room si hay espacio o no en lower y upper
	que tenga en cuenta los stacking
		- tal vez los stacking entre todas las stairs podríamos configurarlos antes de nada??

idear algoritmo para fitear una shape en un available space

Todas las escaleras en todos los floors deberían colocarse pensando en el upper en casos de de boundary fija

Largo plazo:

- Piso entero
	* Elementos con herencia para plantas superiores:
		- Escaleras
		- Habitaciones con techo alto (opcional)
- Bordes
	* Plantearse dilema de areas con o sin bordes
- Ventanas
- Muebles
- 3D
	* Plantearse el 3D: altura de habitaciones, alturas de puertas y ventanas, altura de muebles, etc.
	* Coordinación entre planos apilados (e.g. escaleras, terrazas, etc.)
- Blender
	* Pasar puntos y segmentos a vértices, ejes y planos
	* Texturización

FONDO (opcional, poco prioritario)

los pasillos conectados a free space a veces quedan mal (cuando entran al free space por una esquina)
	* es una situación rebuscada, pero puede darse
	- arreglar esto no es super banal. piensa que el pasillo que entra puede estar a su vez desplazado por un rigid boundary

- A veces quedan rinconcillos entre pasillo y perímetro del padre
	* de momento este espacio se descarta -> se le podría dar una vueltecilla

- el reduce children corner no contempla la posibilidad de que el zigzag esté en el parent boundary
	* el push_boundary_segment si que lo contempla e impide que suceda, pero igual habría que matarlo antes
		** o plantearse un sistema alternativo para que si pueda pasar? habría que pushear/pullear la parent boundary antes del child

- expand corner
	* solucionará uno de los problemas más habituales de la cruz
	* intentar que las habitaciones sean más cuadradas

- Enseñarle a salir de bucles
	*** Alomejor ya no es necesario, el loaned push funciona muy bien
	* Detectar cuando hay bucles

- Plantearse utilizar el hecho de que una habitación en contacto con free space
no pueda expandir ninguna frontera con free space (ni simple ni combinada)
como detonante para que cada una de esta/s regiones de free space sean desplazadas por otra habitación
(aunque normalmente siempre será una única región)
	*** Alomejor ya no es necesario, el loaned push funciona muy bien

- que las habitaciones se vayan posicionando de cara a formar un pasillo pequeño, también cuando el perímero está fijado
	** El pasillo se tendrá que resolver con cada child una vez ha acabado de establecer su perímetro

recolocación de puertas después del setup: deberían buscar el punto más próximo a la puerta de entrada a la habitación padre

puede que el nuevo sistema para juntar free spaces de errores en casos en los que no haría falta añadir más pasillo
	-> cuando se de el caso se estudia

child adaptable debería ser una bool lista que se asigne al ser consultada por primera vez